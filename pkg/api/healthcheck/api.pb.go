// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: healthcheck/api.proto

package healthcheck

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//HttpCheckRequest:Method допустимый HTTP метод
type HttpCheckRequest_Method int32

const (
	HttpCheckRequest_GET     HttpCheckRequest_Method = 0
	HttpCheckRequest_HEAD    HttpCheckRequest_Method = 1
	HttpCheckRequest_POST    HttpCheckRequest_Method = 2
	HttpCheckRequest_PUT     HttpCheckRequest_Method = 3
	HttpCheckRequest_PATCH   HttpCheckRequest_Method = 4
	HttpCheckRequest_OPTIONS HttpCheckRequest_Method = 5
	HttpCheckRequest_TRACE   HttpCheckRequest_Method = 6
)

// Enum value maps for HttpCheckRequest_Method.
var (
	HttpCheckRequest_Method_name = map[int32]string{
		0: "GET",
		1: "HEAD",
		2: "POST",
		3: "PUT",
		4: "PATCH",
		5: "OPTIONS",
		6: "TRACE",
	}
	HttpCheckRequest_Method_value = map[string]int32{
		"GET":     0,
		"HEAD":    1,
		"POST":    2,
		"PUT":     3,
		"PATCH":   4,
		"OPTIONS": 5,
		"TRACE":   6,
	}
)

func (x HttpCheckRequest_Method) Enum() *HttpCheckRequest_Method {
	p := new(HttpCheckRequest_Method)
	*p = x
	return p
}

func (x HttpCheckRequest_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpCheckRequest_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_healthcheck_api_proto_enumTypes[0].Descriptor()
}

func (HttpCheckRequest_Method) Type() protoreflect.EnumType {
	return &file_healthcheck_api_proto_enumTypes[0]
}

func (x HttpCheckRequest_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpCheckRequest_Method.Descriptor instead.
func (HttpCheckRequest_Method) EnumDescriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{2, 0}
}

//HttpCheckRequest:Scheme возможные схемы
type HttpCheckRequest_Scheme int32

const (
	HttpCheckRequest_HTTP  HttpCheckRequest_Scheme = 0
	HttpCheckRequest_HTTPS HttpCheckRequest_Scheme = 1
)

// Enum value maps for HttpCheckRequest_Scheme.
var (
	HttpCheckRequest_Scheme_name = map[int32]string{
		0: "HTTP",
		1: "HTTPS",
	}
	HttpCheckRequest_Scheme_value = map[string]int32{
		"HTTP":  0,
		"HTTPS": 1,
	}
)

func (x HttpCheckRequest_Scheme) Enum() *HttpCheckRequest_Scheme {
	p := new(HttpCheckRequest_Scheme)
	*p = x
	return p
}

func (x HttpCheckRequest_Scheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpCheckRequest_Scheme) Descriptor() protoreflect.EnumDescriptor {
	return file_healthcheck_api_proto_enumTypes[1].Descriptor()
}

func (HttpCheckRequest_Scheme) Type() protoreflect.EnumType {
	return &file_healthcheck_api_proto_enumTypes[1]
}

func (x HttpCheckRequest_Scheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpCheckRequest_Scheme.Descriptor instead.
func (HttpCheckRequest_Scheme) EnumDescriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{2, 1}
}

//HttpHeader HTTP заголовки
type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//набор значений
	Values map[string]*HttpHeader_Header `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{0}
}

func (x *HttpHeader) GetValues() map[string]*HttpHeader_Header {
	if x != nil {
		return x.Values
	}
	return nil
}

//HttpStatusCodes набор HTTP статус-кодов используемых для анализа в ответах
type HttpStatusCodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//массив статусов и диапазонов
	Values []*HttpStatusCodes_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HttpStatusCodes) Reset() {
	*x = HttpStatusCodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpStatusCodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpStatusCodes) ProtoMessage() {}

func (x *HttpStatusCodes) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpStatusCodes.ProtoReflect.Descriptor instead.
func (*HttpStatusCodes) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{1}
}

func (x *HttpStatusCodes) GetValues() []*HttpStatusCodes_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

//HttpCheckRequest запрос HTTP(s) health check
type HttpCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//адрес IP:PORT
	AddressToCheck string `protobuf:"bytes,1,opt,name=address_to_check,json=addressToCheck,proto3" json:"address_to_check,omitempty"`
	//сторка запроса в backend
	QueryUri string               `protobuf:"bytes,2,opt,name=query_uri,json=queryUri,proto3" json:"query_uri,omitempty"`
	Timeout  *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	//маркируем исходящий сокет - свойство необходимое для маршрутизации запроса в реальный backend
	SocketMark int64 `protobuf:"varint,4,opt,name=socket_mark,json=socketMark,proto3" json:"socket_mark,omitempty"`
	//список хороших STATUS-ов плученных из ответа
	GoodStatusCodes *HttpStatusCodes `protobuf:"bytes,5,opt,name=good_status_codes,json=goodStatusCodes,proto3" json:"good_status_codes,omitempty"`
	//HTTP заголовки
	Header *HttpHeader `protobuf:"bytes,6,opt,name=header,proto3" json:"header,omitempty"`
	//используемый метод GET, POST, HEAD, etc
	UseMethod HttpCheckRequest_Method `protobuf:"varint,7,opt,name=use_method,json=useMethod,proto3,enum=healthcheck.HttpCheckRequest_Method" json:"use_method,omitempty"`
	//использовать определённую HTTP / HTTPS
	UseScheme HttpCheckRequest_Scheme `protobuf:"varint,8,opt,name=use_scheme,json=useScheme,proto3,enum=healthcheck.HttpCheckRequest_Scheme" json:"use_scheme,omitempty"`
	//расширения
	Extension *HttpCheckRequestExtension `protobuf:"bytes,9,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *HttpCheckRequest) Reset() {
	*x = HttpCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpCheckRequest) ProtoMessage() {}

func (x *HttpCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpCheckRequest.ProtoReflect.Descriptor instead.
func (*HttpCheckRequest) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{2}
}

func (x *HttpCheckRequest) GetAddressToCheck() string {
	if x != nil {
		return x.AddressToCheck
	}
	return ""
}

func (x *HttpCheckRequest) GetQueryUri() string {
	if x != nil {
		return x.QueryUri
	}
	return ""
}

func (x *HttpCheckRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HttpCheckRequest) GetSocketMark() int64 {
	if x != nil {
		return x.SocketMark
	}
	return 0
}

func (x *HttpCheckRequest) GetGoodStatusCodes() *HttpStatusCodes {
	if x != nil {
		return x.GoodStatusCodes
	}
	return nil
}

func (x *HttpCheckRequest) GetHeader() *HttpHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HttpCheckRequest) GetUseMethod() HttpCheckRequest_Method {
	if x != nil {
		return x.UseMethod
	}
	return HttpCheckRequest_GET
}

func (x *HttpCheckRequest) GetUseScheme() HttpCheckRequest_Scheme {
	if x != nil {
		return x.UseScheme
	}
	return HttpCheckRequest_HTTP
}

func (x *HttpCheckRequest) GetExtension() *HttpCheckRequestExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

//HttpCheckRequestExtension
type HttpCheckRequestExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//если true не просматривать полностью ответ от backend-а а лишь наиболее подходящий фрагмент
	NearSearchMode bool `protobuf:"varint,1,opt,name=nearSearchMode,proto3" json:"nearSearchMode,omitempty"`
	//данные которые должны быть в ответе от backend-а
	//ожидаемые данные от backend-a это JSON типа {key:val, key:val} или [{key:val, key:val, ...},{key:val, key:val, ...}]
	MandatoryData map[string]string `protobuf:"bytes,2,rep,name=mandatory_data,json=mandatoryData,proto3" json:"mandatory_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpCheckRequestExtension) Reset() {
	*x = HttpCheckRequestExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpCheckRequestExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpCheckRequestExtension) ProtoMessage() {}

func (x *HttpCheckRequestExtension) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpCheckRequestExtension.ProtoReflect.Descriptor instead.
func (*HttpCheckRequestExtension) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{3}
}

func (x *HttpCheckRequestExtension) GetNearSearchMode() bool {
	if x != nil {
		return x.NearSearchMode
	}
	return false
}

func (x *HttpCheckRequestExtension) GetMandatoryData() map[string]string {
	if x != nil {
		return x.MandatoryData
	}
	return nil
}

//TcpCheckRequest запрос TCP health check
type TcpCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//адрес IP:PORT
	AddressToCheck string               `protobuf:"bytes,1,opt,name=address_to_check,json=addressToCheck,proto3" json:"address_to_check,omitempty"`
	Timeout        *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	//маркируем исходящий сокет - свойство необходимое для маршрутизации запроса в реальный backend
	SocketMark int64 `protobuf:"varint,3,opt,name=socket_mark,json=socketMark,proto3" json:"socket_mark,omitempty"`
}

func (x *TcpCheckRequest) Reset() {
	*x = TcpCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpCheckRequest) ProtoMessage() {}

func (x *TcpCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpCheckRequest.ProtoReflect.Descriptor instead.
func (*TcpCheckRequest) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{4}
}

func (x *TcpCheckRequest) GetAddressToCheck() string {
	if x != nil {
		return x.AddressToCheck
	}
	return ""
}

func (x *TcpCheckRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *TcpCheckRequest) GetSocketMark() int64 {
	if x != nil {
		return x.SocketMark
	}
	return 0
}

//IcmpCheckRequest запрос ICMP health check
type IcmpCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//IP-адрес IPv4|IPv6 или hostname
	Host    string               `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	//маркируем исходящий сокет - свойство необходимое для маршрутизации запроса в реальный backend
	SocketMark int64 `protobuf:"varint,3,opt,name=socket_mark,json=socketMark,proto3" json:"socket_mark,omitempty"`
}

func (x *IcmpCheckRequest) Reset() {
	*x = IcmpCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcmpCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcmpCheckRequest) ProtoMessage() {}

func (x *IcmpCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcmpCheckRequest.ProtoReflect.Descriptor instead.
func (*IcmpCheckRequest) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{5}
}

func (x *IcmpCheckRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *IcmpCheckRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *IcmpCheckRequest) GetSocketMark() int64 {
	if x != nil {
		return x.SocketMark
	}
	return 0
}

//HealthCheckResponse ответ от HC
type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//если true то получили хороший ответ от backed-а
	IsOk bool `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{6}
}

func (x *HealthCheckResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

//HttpHeader:HeaderData содержит список значений HTTP заголовка
type HttpHeader_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//массив строк значений заголовка
	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *HttpHeader_Header) Reset() {
	*x = HttpHeader_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader_Header) ProtoMessage() {}

func (x *HttpHeader_Header) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader_Header.ProtoReflect.Descriptor instead.
func (*HttpHeader_Header) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HttpHeader_Header) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

//HttpStatusCodes:Range диапазон HTTP статус-ответов
type HttpStatusCodes_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//начало диапазона
	From int32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	//конец диапазона
	To int32 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *HttpStatusCodes_Range) Reset() {
	*x = HttpStatusCodes_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpStatusCodes_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpStatusCodes_Range) ProtoMessage() {}

func (x *HttpStatusCodes_Range) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpStatusCodes_Range.ProtoReflect.Descriptor instead.
func (*HttpStatusCodes_Range) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{1, 0}
}

func (x *HttpStatusCodes_Range) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *HttpStatusCodes_Range) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

//HttpStatusCodes:Value одно из двух: единичный код или диапазон кодов
type HttpStatusCodes_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Is:
	//	*HttpStatusCodes_Value_Code
	//	*HttpStatusCodes_Value_Range
	Is isHttpStatusCodes_Value_Is `protobuf_oneof:"is"`
}

func (x *HttpStatusCodes_Value) Reset() {
	*x = HttpStatusCodes_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpStatusCodes_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpStatusCodes_Value) ProtoMessage() {}

func (x *HttpStatusCodes_Value) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpStatusCodes_Value.ProtoReflect.Descriptor instead.
func (*HttpStatusCodes_Value) Descriptor() ([]byte, []int) {
	return file_healthcheck_api_proto_rawDescGZIP(), []int{1, 1}
}

func (m *HttpStatusCodes_Value) GetIs() isHttpStatusCodes_Value_Is {
	if m != nil {
		return m.Is
	}
	return nil
}

func (x *HttpStatusCodes_Value) GetCode() int32 {
	if x, ok := x.GetIs().(*HttpStatusCodes_Value_Code); ok {
		return x.Code
	}
	return 0
}

func (x *HttpStatusCodes_Value) GetRange() *HttpStatusCodes_Range {
	if x, ok := x.GetIs().(*HttpStatusCodes_Value_Range); ok {
		return x.Range
	}
	return nil
}

type isHttpStatusCodes_Value_Is interface {
	isHttpStatusCodes_Value_Is()
}

type HttpStatusCodes_Value_Code struct {
	//единичный статус код
	Code int32 `protobuf:"varint,1,opt,name=code,proto3,oneof"`
}

type HttpStatusCodes_Value_Range struct {
	//диапазон статус кодов
	Range *HttpStatusCodes_Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*HttpStatusCodes_Value_Code) isHttpStatusCodes_Value_Is() {}

func (*HttpStatusCodes_Value_Range) isHttpStatusCodes_Value_Is() {}

var File_healthcheck_api_proto protoreflect.FileDescriptor

var file_healthcheck_api_proto_rawDesc = []byte{
	0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x1c,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x59, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x48, 0x74, 0x74, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x6f, 0x1a, 0x5f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x04, 0x0a, 0x02, 0x69, 0x73, 0x22, 0xec, 0x04, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x55, 0x72,
	0x69, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x10, 0x06, 0x22, 0x1d, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x10, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x61, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x60, 0x0a, 0x0e, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x40, 0x0a, 0x12,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91,
	0x01, 0x0a, 0x0f, 0x54, 0x63, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x22, 0x7c, 0x0a, 0x10, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x22, 0x2a, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x32, 0xc4, 0x02, 0x0a,
	0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x66,
	0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x09, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76,
	0x32, 0x2f, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x63,
	0x0a, 0x08, 0x54, 0x63, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x54, 0x63, 0x70, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x54, 0x63, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x42, 0xb5, 0x01, 0x5a, 0x0c, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x92, 0x41, 0xa3, 0x01, 0x12, 0x7a, 0x0a, 0x18, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x20, 0x41, 0x50, 0x49, 0x22, 0x59, 0x0a, 0x01, 0x45, 0x12, 0x54, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x67, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x30, 0x32, 0x30, 0x2f, 0x30, 0x37, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x74, 0x6f,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x32,
	0x03, 0x32, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_healthcheck_api_proto_rawDescOnce sync.Once
	file_healthcheck_api_proto_rawDescData = file_healthcheck_api_proto_rawDesc
)

func file_healthcheck_api_proto_rawDescGZIP() []byte {
	file_healthcheck_api_proto_rawDescOnce.Do(func() {
		file_healthcheck_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_healthcheck_api_proto_rawDescData)
	})
	return file_healthcheck_api_proto_rawDescData
}

var file_healthcheck_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_healthcheck_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_healthcheck_api_proto_goTypes = []interface{}{
	(HttpCheckRequest_Method)(0),      // 0: healthcheck.HttpCheckRequest.Method
	(HttpCheckRequest_Scheme)(0),      // 1: healthcheck.HttpCheckRequest.Scheme
	(*HttpHeader)(nil),                // 2: healthcheck.HttpHeader
	(*HttpStatusCodes)(nil),           // 3: healthcheck.HttpStatusCodes
	(*HttpCheckRequest)(nil),          // 4: healthcheck.HttpCheckRequest
	(*HttpCheckRequestExtension)(nil), // 5: healthcheck.HttpCheckRequestExtension
	(*TcpCheckRequest)(nil),           // 6: healthcheck.TcpCheckRequest
	(*IcmpCheckRequest)(nil),          // 7: healthcheck.IcmpCheckRequest
	(*HealthCheckResponse)(nil),       // 8: healthcheck.HealthCheckResponse
	(*HttpHeader_Header)(nil),         // 9: healthcheck.HttpHeader.Header
	nil,                               // 10: healthcheck.HttpHeader.ValuesEntry
	(*HttpStatusCodes_Range)(nil),     // 11: healthcheck.HttpStatusCodes.Range
	(*HttpStatusCodes_Value)(nil),     // 12: healthcheck.HttpStatusCodes.Value
	nil,                               // 13: healthcheck.HttpCheckRequestExtension.MandatoryDataEntry
	(*durationpb.Duration)(nil),       // 14: google.protobuf.Duration
}
var file_healthcheck_api_proto_depIdxs = []int32{
	10, // 0: healthcheck.HttpHeader.values:type_name -> healthcheck.HttpHeader.ValuesEntry
	12, // 1: healthcheck.HttpStatusCodes.values:type_name -> healthcheck.HttpStatusCodes.Value
	14, // 2: healthcheck.HttpCheckRequest.timeout:type_name -> google.protobuf.Duration
	3,  // 3: healthcheck.HttpCheckRequest.good_status_codes:type_name -> healthcheck.HttpStatusCodes
	2,  // 4: healthcheck.HttpCheckRequest.header:type_name -> healthcheck.HttpHeader
	0,  // 5: healthcheck.HttpCheckRequest.use_method:type_name -> healthcheck.HttpCheckRequest.Method
	1,  // 6: healthcheck.HttpCheckRequest.use_scheme:type_name -> healthcheck.HttpCheckRequest.Scheme
	5,  // 7: healthcheck.HttpCheckRequest.extension:type_name -> healthcheck.HttpCheckRequestExtension
	13, // 8: healthcheck.HttpCheckRequestExtension.mandatory_data:type_name -> healthcheck.HttpCheckRequestExtension.MandatoryDataEntry
	14, // 9: healthcheck.TcpCheckRequest.timeout:type_name -> google.protobuf.Duration
	14, // 10: healthcheck.IcmpCheckRequest.timeout:type_name -> google.protobuf.Duration
	9,  // 11: healthcheck.HttpHeader.ValuesEntry.value:type_name -> healthcheck.HttpHeader.Header
	11, // 12: healthcheck.HttpStatusCodes.Value.range:type_name -> healthcheck.HttpStatusCodes.Range
	4,  // 13: healthcheck.HealthChecker.HttpCheck:input_type -> healthcheck.HttpCheckRequest
	7,  // 14: healthcheck.HealthChecker.IcmpCheck:input_type -> healthcheck.IcmpCheckRequest
	6,  // 15: healthcheck.HealthChecker.TcpCheck:input_type -> healthcheck.TcpCheckRequest
	8,  // 16: healthcheck.HealthChecker.HttpCheck:output_type -> healthcheck.HealthCheckResponse
	8,  // 17: healthcheck.HealthChecker.IcmpCheck:output_type -> healthcheck.HealthCheckResponse
	8,  // 18: healthcheck.HealthChecker.TcpCheck:output_type -> healthcheck.HealthCheckResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_healthcheck_api_proto_init() }
func file_healthcheck_api_proto_init() {
	if File_healthcheck_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_healthcheck_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpStatusCodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpCheckRequestExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcmpCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpStatusCodes_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpStatusCodes_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_healthcheck_api_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*HttpStatusCodes_Value_Code)(nil),
		(*HttpStatusCodes_Value_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_healthcheck_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_healthcheck_api_proto_goTypes,
		DependencyIndexes: file_healthcheck_api_proto_depIdxs,
		EnumInfos:         file_healthcheck_api_proto_enumTypes,
		MessageInfos:      file_healthcheck_api_proto_msgTypes,
	}.Build()
	File_healthcheck_api_proto = out.File
	file_healthcheck_api_proto_rawDesc = nil
	file_healthcheck_api_proto_goTypes = nil
	file_healthcheck_api_proto_depIdxs = nil
}
