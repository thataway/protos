// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: ipvs/api.proto

package ipvs

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//ScheduleMethod is an algorithm for allocating TCP connections and/or UDP datagrams onto real servers
//see in http://www.linuxvirtualserver.org/docs/scheduling.html
type ScheduleMethod int32

const (
	//(rr) - round robin distributes jobs equally amongst the available real servers
	ScheduleMethod_RoundRobin ScheduleMethod = 0
	//(wrr) - Weighted Round Robin: assigns jobs to real servers proportionally to there real servers' weight.
	//Servers with higher weights receive new jobs first and get more jobs than servers with lower weights.
	//Servers with equal weights get an equal distribution of new jobs.
	ScheduleMethod_WeightedRoundRobin ScheduleMethod = 1
	//(lc) - Least-Connection: assigns more jobs to real servers with fewer active jobs.
	ScheduleMethod_LeastConnection ScheduleMethod = 2
	//(wlc) - Weighted Least-Connection: assigns more jobs to servers with fewer jobs
	//and relative to the real servers' weight (Ci/Wi). This is the default.
	ScheduleMethod_WeightedLeastConnection ScheduleMethod = 3
	//(lblc) - Locality-Based Least-Connection: assigns jobs destined for the same
	//IP address to the same server if the server is not overloaded and available;
	//otherwise assign jobs to servers with fewer jobs, and keep it for future assignment.
	ScheduleMethod_LocalityBasedLeastConnection ScheduleMethod = 4
	//(lblcr) - Locality-Based Least-Connection with Replication:
	//assigns jobs destined for the same IP address to the least-connection node in the server set for the IP address.
	//If all the node in the server set are over loaded, it picks up a node with fewer jobs in the cluster and
	//adds it in the sever set for the target. If the server set has not been modified for the specified time,
	//the most loaded node is removed from the server set, in order to avoid high degree of replication
	ScheduleMethod_LocalityBasedLeastConnectionWithReplication ScheduleMethod = 5
	//(dh) - Destination Hashing: assigns jobs to servers through looking up a statically assigned
	//hash table by their destination IP addresses
	ScheduleMethod_DestinationHashing ScheduleMethod = 6
	//(sh) - Source Hashing: assigns jobs to servers through looking up a statically assigned hash
	//table by their source IP addresses
	ScheduleMethod_SourceHashing ScheduleMethod = 7
	//(sed) - Shortest Expected Delay: assigns an incoming job to the server with the
	//shortest expected delay. The expected delay that the job will experience is (Ci + 1) / Ui if sent to
	//the ith server, in which Ci is the number of jobs on the the ith server and Ui is the
	//fixed service rate (weight) of the ith server
	ScheduleMethod_ShortestExpectedDelay ScheduleMethod = 8
	//(nq) - Never Queue: assigns an incoming job to an idle server if there is, instead of
	//waiting for a fast one; if all the servers are busy, it adopts the Shortest Expected Delay policy to
	//assign the job
	ScheduleMethod_NeverQueue ScheduleMethod = 9
	//(mh) The mh algorithm is to assign a preference list of all the lookup
	//table positions to each destination and populate the table with
	//the most-preferred position of destinations. Then it is to select
	//destination with the hash key of source IP address through looking
	//up a the lookup table
	ScheduleMethod_MaglevHashing ScheduleMethod = 10
	//(fo) - all other scheduling modules implement some form of load balancing,
	//while this offers a simple failover solution. The weighted failover scheduling algorithm directs
	//network connections to the server with the highest weight that is currently available
	//See in https://serverfault.com/questions/950447/keepalived-what-are-the-fo-and-mh-lvs-scheduling-algorithms
	ScheduleMethod_WeightedFailOver ScheduleMethod = 11
	//(ovf) - loadbalancing according to number of active
	//connections , will keep all connections to the node with the highest weight
	//and overflow to the next node if the number of connections exceeds the node's weight.
	//Note that this scheduler might not be suitable for UDP because it only uses active connections
	ScheduleMethod_Overflow ScheduleMethod = 12
)

// Enum value maps for ScheduleMethod.
var (
	ScheduleMethod_name = map[int32]string{
		0:  "RoundRobin",
		1:  "WeightedRoundRobin",
		2:  "LeastConnection",
		3:  "WeightedLeastConnection",
		4:  "LocalityBasedLeastConnection",
		5:  "LocalityBasedLeastConnectionWithReplication",
		6:  "DestinationHashing",
		7:  "SourceHashing",
		8:  "ShortestExpectedDelay",
		9:  "NeverQueue",
		10: "MaglevHashing",
		11: "WeightedFailOver",
		12: "Overflow",
	}
	ScheduleMethod_value = map[string]int32{
		"RoundRobin":                                  0,
		"WeightedRoundRobin":                          1,
		"LeastConnection":                             2,
		"WeightedLeastConnection":                     3,
		"LocalityBasedLeastConnection":                4,
		"LocalityBasedLeastConnectionWithReplication": 5,
		"DestinationHashing":                          6,
		"SourceHashing":                               7,
		"ShortestExpectedDelay":                       8,
		"NeverQueue":                                  9,
		"MaglevHashing":                               10,
		"WeightedFailOver":                            11,
		"Overflow":                                    12,
	}
)

func (x ScheduleMethod) Enum() *ScheduleMethod {
	p := new(ScheduleMethod)
	*p = x
	return p
}

func (x ScheduleMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_ipvs_api_proto_enumTypes[0].Descriptor()
}

func (ScheduleMethod) Type() protoreflect.EnumType {
	return &file_ipvs_api_proto_enumTypes[0]
}

func (x ScheduleMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleMethod.Descriptor instead.
func (ScheduleMethod) EnumDescriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{0}
}

//NetworkTransport is an IP-network type transport to use with instance of VirtualServer
type NetworkTransport int32

const (
	NetworkTransport_TCP NetworkTransport = 0
	NetworkTransport_UDP NetworkTransport = 1
)

// Enum value maps for NetworkTransport.
var (
	NetworkTransport_name = map[int32]string{
		0: "TCP",
		1: "UDP",
	}
	NetworkTransport_value = map[string]int32{
		"TCP": 0,
		"UDP": 1,
	}
)

func (x NetworkTransport) Enum() *NetworkTransport {
	p := new(NetworkTransport)
	*p = x
	return p
}

func (x NetworkTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_ipvs_api_proto_enumTypes[1].Descriptor()
}

func (NetworkTransport) Type() protoreflect.EnumType {
	return &file_ipvs_api_proto_enumTypes[1]
}

func (x NetworkTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkTransport.Descriptor instead.
func (NetworkTransport) EnumDescriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{1}
}

//PacketFwdMethod represents method of forwarding packets in VS from user to real server(s)
type PacketFwdMethod int32

const (
	//DirectRouting is direct routing
	PacketFwdMethod_DirectRouting PacketFwdMethod = 0
	//Tunnel uses ipip encapsulation
	PacketFwdMethod_Tunnel PacketFwdMethod = 1
	//Masquerading is network access translation (NAT)
	PacketFwdMethod_Masquerading PacketFwdMethod = 2
)

// Enum value maps for PacketFwdMethod.
var (
	PacketFwdMethod_name = map[int32]string{
		0: "DirectRouting",
		1: "Tunnel",
		2: "Masquerading",
	}
	PacketFwdMethod_value = map[string]int32{
		"DirectRouting": 0,
		"Tunnel":        1,
		"Masquerading":  2,
	}
)

func (x PacketFwdMethod) Enum() *PacketFwdMethod {
	p := new(PacketFwdMethod)
	*p = x
	return p
}

func (x PacketFwdMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketFwdMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_ipvs_api_proto_enumTypes[2].Descriptor()
}

func (PacketFwdMethod) Type() protoreflect.EnumType {
	return &file_ipvs_api_proto_enumTypes[2]
}

func (x PacketFwdMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketFwdMethod.Descriptor instead.
func (PacketFwdMethod) EnumDescriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{2}
}

type IssueReason_Code int32

const (
	//external error that happens out from external libs
	IssueReason_ExternalError IssueReason_Code = 0
	//Something is not supported by IPVS implementor
	IssueReason_Unsupported IssueReason_Code = 1
	//when delete/update VS is not exist subject
	IssueReason_VirtualServerNotFound IssueReason_Code = 2
	//when delete/update RS is not exist subject
	IssueReason_RealServerNotFound IssueReason_Code = 3
)

// Enum value maps for IssueReason_Code.
var (
	IssueReason_Code_name = map[int32]string{
		0: "ExternalError",
		1: "Unsupported",
		2: "VirtualServerNotFound",
		3: "RealServerNotFound",
	}
	IssueReason_Code_value = map[string]int32{
		"ExternalError":         0,
		"Unsupported":           1,
		"VirtualServerNotFound": 2,
		"RealServerNotFound":    3,
	}
)

func (x IssueReason_Code) Enum() *IssueReason_Code {
	p := new(IssueReason_Code)
	*p = x
	return p
}

func (x IssueReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_ipvs_api_proto_enumTypes[3].Descriptor()
}

func (IssueReason_Code) Type() protoreflect.EnumType {
	return &file_ipvs_api_proto_enumTypes[3]
}

func (x IssueReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueReason_Code.Descriptor instead.
func (IssueReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{2, 0}
}

//UpdateVirtualServersRequest request for delete+update virtual server(s)
type UpdateVirtualServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceUpsert bool                     `protobuf:"varint,1,opt,name=force_upsert,json=forceUpsert,proto3" json:"force_upsert,omitempty"`
	Delete      []*VirtualServerIdentity `protobuf:"bytes,2,rep,name=delete,proto3" json:"delete,omitempty"`
	Update      []*VirtualServer         `protobuf:"bytes,3,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdateVirtualServersRequest) Reset() {
	*x = UpdateVirtualServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtualServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualServersRequest) ProtoMessage() {}

func (x *UpdateVirtualServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualServersRequest.ProtoReflect.Descriptor instead.
func (*UpdateVirtualServersRequest) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateVirtualServersRequest) GetForceUpsert() bool {
	if x != nil {
		return x.ForceUpsert
	}
	return false
}

func (x *UpdateVirtualServersRequest) GetDelete() []*VirtualServerIdentity {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *UpdateVirtualServersRequest) GetUpdate() []*VirtualServer {
	if x != nil {
		return x.Update
	}
	return nil
}

//UpdateRealServersRequest request foe delete+update real server(s)
type UpdateRealServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceUpsert           bool                   `protobuf:"varint,1,opt,name=force_upsert,json=forceUpsert,proto3" json:"force_upsert,omitempty"`
	VirtualServerIdentity *VirtualServerIdentity `protobuf:"bytes,2,opt,name=virtualServerIdentity,proto3" json:"virtualServerIdentity,omitempty"`
	Delete                []*RealServerAddress   `protobuf:"bytes,3,rep,name=delete,proto3" json:"delete,omitempty"`
	Update                []*RealServer          `protobuf:"bytes,4,rep,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdateRealServersRequest) Reset() {
	*x = UpdateRealServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRealServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRealServersRequest) ProtoMessage() {}

func (x *UpdateRealServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRealServersRequest.ProtoReflect.Descriptor instead.
func (*UpdateRealServersRequest) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateRealServersRequest) GetForceUpsert() bool {
	if x != nil {
		return x.ForceUpsert
	}
	return false
}

func (x *UpdateRealServersRequest) GetVirtualServerIdentity() *VirtualServerIdentity {
	if x != nil {
		return x.VirtualServerIdentity
	}
	return nil
}

func (x *UpdateRealServersRequest) GetDelete() []*RealServerAddress {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *UpdateRealServersRequest) GetUpdate() []*RealServer {
	if x != nil {
		return x.Update
	}
	return nil
}

//IssueReason issue reason on update/delete operation
type IssueReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//issue reason code
	Code IssueReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=ipvs.IssueReason_Code" json:"code,omitempty"`
	//issue reason in textual format
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *IssueReason) Reset() {
	*x = IssueReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueReason) ProtoMessage() {}

func (x *IssueReason) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueReason.ProtoReflect.Descriptor instead.
func (*IssueReason) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{2}
}

func (x *IssueReason) GetCode() IssueReason_Code {
	if x != nil {
		return x.Code
	}
	return IssueReason_ExternalError
}

func (x *IssueReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//VirtualServerIssue issue that happens on update/delete IP-virtual server
type VirtualServerIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *IssueReason `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// Types that are assignable to When:
	//	*VirtualServerIssue_Delete
	//	*VirtualServerIssue_Update
	When isVirtualServerIssue_When `protobuf_oneof:"when"`
}

func (x *VirtualServerIssue) Reset() {
	*x = VirtualServerIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualServerIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServerIssue) ProtoMessage() {}

func (x *VirtualServerIssue) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServerIssue.ProtoReflect.Descriptor instead.
func (*VirtualServerIssue) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualServerIssue) GetReason() *IssueReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (m *VirtualServerIssue) GetWhen() isVirtualServerIssue_When {
	if m != nil {
		return m.When
	}
	return nil
}

func (x *VirtualServerIssue) GetDelete() *VirtualServerIdentity {
	if x, ok := x.GetWhen().(*VirtualServerIssue_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *VirtualServerIssue) GetUpdate() *VirtualServer {
	if x, ok := x.GetWhen().(*VirtualServerIssue_Update); ok {
		return x.Update
	}
	return nil
}

type isVirtualServerIssue_When interface {
	isVirtualServerIssue_When()
}

type VirtualServerIssue_Delete struct {
	//when-delete on delete operation
	Delete *VirtualServerIdentity `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

type VirtualServerIssue_Update struct {
	//when-update on update operation
	Update *VirtualServer `protobuf:"bytes,3,opt,name=update,proto3,oneof"`
}

func (*VirtualServerIssue_Delete) isVirtualServerIssue_When() {}

func (*VirtualServerIssue_Update) isVirtualServerIssue_When() {}

//RealServerIssue issue that happens on update/delete real server
type RealServerIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *IssueReason `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// Types that are assignable to When:
	//	*RealServerIssue_Delete
	//	*RealServerIssue_Update
	When isRealServerIssue_When `protobuf_oneof:"when"`
}

func (x *RealServerIssue) Reset() {
	*x = RealServerIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealServerIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealServerIssue) ProtoMessage() {}

func (x *RealServerIssue) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealServerIssue.ProtoReflect.Descriptor instead.
func (*RealServerIssue) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{4}
}

func (x *RealServerIssue) GetReason() *IssueReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (m *RealServerIssue) GetWhen() isRealServerIssue_When {
	if m != nil {
		return m.When
	}
	return nil
}

func (x *RealServerIssue) GetDelete() *RealServerAddress {
	if x, ok := x.GetWhen().(*RealServerIssue_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *RealServerIssue) GetUpdate() *RealServer {
	if x, ok := x.GetWhen().(*RealServerIssue_Update); ok {
		return x.Update
	}
	return nil
}

type isRealServerIssue_When interface {
	isRealServerIssue_When()
}

type RealServerIssue_Delete struct {
	//when-delete on delete operation
	Delete *RealServerAddress `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

type RealServerIssue_Update struct {
	//when-update on update operation
	Update *RealServer `protobuf:"bytes,3,opt,name=update,proto3,oneof"`
}

func (*RealServerIssue_Delete) isRealServerIssue_When() {}

func (*RealServerIssue_Update) isRealServerIssue_When() {}

//UpdateRealServersResponse collects issues on update real servers
type UpdateRealServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issues []*RealServerIssue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *UpdateRealServersResponse) Reset() {
	*x = UpdateRealServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRealServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRealServersResponse) ProtoMessage() {}

func (x *UpdateRealServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRealServersResponse.ProtoReflect.Descriptor instead.
func (*UpdateRealServersResponse) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRealServersResponse) GetIssues() []*RealServerIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

//UpdateRealServersResponse collects issues on update IP-virtual servers
type UpdateVirtualServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issues []*VirtualServerIssue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *UpdateVirtualServersResponse) Reset() {
	*x = UpdateVirtualServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtualServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualServersResponse) ProtoMessage() {}

func (x *UpdateVirtualServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualServersResponse.ProtoReflect.Descriptor instead.
func (*UpdateVirtualServersResponse) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateVirtualServersResponse) GetIssues() []*VirtualServerIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

//ListVirtualServersRequest ask to list all virtual servers with/without its reals
type ListVirtualServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//includeReals add real servers into response
	IncludeReals bool `protobuf:"varint,1,opt,name=includeReals,proto3" json:"includeReals,omitempty"`
}

func (x *ListVirtualServersRequest) Reset() {
	*x = ListVirtualServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtualServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualServersRequest) ProtoMessage() {}

func (x *ListVirtualServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualServersRequest.ProtoReflect.Descriptor instead.
func (*ListVirtualServersRequest) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListVirtualServersRequest) GetIncludeReals() bool {
	if x != nil {
		return x.IncludeReals
	}
	return false
}

//ListVirtualServersResponse list all virtual servers with/without its reals
type ListVirtualServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualServers []*VirtualServerWithReals `protobuf:"bytes,1,rep,name=virtualServers,proto3" json:"virtualServers,omitempty"`
}

func (x *ListVirtualServersResponse) Reset() {
	*x = ListVirtualServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVirtualServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVirtualServersResponse) ProtoMessage() {}

func (x *ListVirtualServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVirtualServersResponse.ProtoReflect.Descriptor instead.
func (*ListVirtualServersResponse) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{8}
}

func (x *ListVirtualServersResponse) GetVirtualServers() []*VirtualServerWithReals {
	if x != nil {
		return x.VirtualServers
	}
	return nil
}

//FindVirtualServerRequest it gets-or-fails the IP-virtual server by its identity
type FindVirtualServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualServerIdentity *VirtualServerIdentity `protobuf:"bytes,1,opt,name=virtualServerIdentity,proto3" json:"virtualServerIdentity,omitempty"`
	//includeReals add real servers into response
	IncludeReals bool `protobuf:"varint,2,opt,name=includeReals,proto3" json:"includeReals,omitempty"`
}

func (x *FindVirtualServerRequest) Reset() {
	*x = FindVirtualServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindVirtualServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindVirtualServerRequest) ProtoMessage() {}

func (x *FindVirtualServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindVirtualServerRequest.ProtoReflect.Descriptor instead.
func (*FindVirtualServerRequest) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{9}
}

func (x *FindVirtualServerRequest) GetVirtualServerIdentity() *VirtualServerIdentity {
	if x != nil {
		return x.VirtualServerIdentity
	}
	return nil
}

func (x *FindVirtualServerRequest) GetIncludeReals() bool {
	if x != nil {
		return x.IncludeReals
	}
	return false
}

//FindVirtualServerResponse response with virtual server with/without their real server(s)
type FindVirtualServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualServer *VirtualServerWithReals `protobuf:"bytes,1,opt,name=virtualServer,proto3" json:"virtualServer,omitempty"`
}

func (x *FindVirtualServerResponse) Reset() {
	*x = FindVirtualServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindVirtualServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindVirtualServerResponse) ProtoMessage() {}

func (x *FindVirtualServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindVirtualServerResponse.ProtoReflect.Descriptor instead.
func (*FindVirtualServerResponse) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{10}
}

func (x *FindVirtualServerResponse) GetVirtualServer() *VirtualServerWithReals {
	if x != nil {
		return x.VirtualServer
	}
	return nil
}

//VirtualServerAddress represents IP network address of virtual server
type VirtualServerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network NetworkTransport `protobuf:"varint,1,opt,name=network,proto3,enum=ipvs.NetworkTransport" json:"network,omitempty"`
	Host    string           `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port    uint32           `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *VirtualServerAddress) Reset() {
	*x = VirtualServerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualServerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServerAddress) ProtoMessage() {}

func (x *VirtualServerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServerAddress.ProtoReflect.Descriptor instead.
func (*VirtualServerAddress) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{11}
}

func (x *VirtualServerAddress) GetNetwork() NetworkTransport {
	if x != nil {
		return x.Network
	}
	return NetworkTransport_TCP
}

func (x *VirtualServerAddress) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *VirtualServerAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

//VirtualServerIdentity virtual server may be identified by address or firewall-mark
type VirtualServerIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to By:
	//	*VirtualServerIdentity_Address
	//	*VirtualServerIdentity_FirewallMark
	By isVirtualServerIdentity_By `protobuf_oneof:"by"`
}

func (x *VirtualServerIdentity) Reset() {
	*x = VirtualServerIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualServerIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServerIdentity) ProtoMessage() {}

func (x *VirtualServerIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServerIdentity.ProtoReflect.Descriptor instead.
func (*VirtualServerIdentity) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{12}
}

func (m *VirtualServerIdentity) GetBy() isVirtualServerIdentity_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *VirtualServerIdentity) GetAddress() *VirtualServerAddress {
	if x, ok := x.GetBy().(*VirtualServerIdentity_Address); ok {
		return x.Address
	}
	return nil
}

func (x *VirtualServerIdentity) GetFirewallMark() uint32 {
	if x, ok := x.GetBy().(*VirtualServerIdentity_FirewallMark); ok {
		return x.FirewallMark
	}
	return 0
}

type isVirtualServerIdentity_By interface {
	isVirtualServerIdentity_By()
}

type VirtualServerIdentity_Address struct {
	Address *VirtualServerAddress `protobuf:"bytes,1,opt,name=address,proto3,oneof"`
}

type VirtualServerIdentity_FirewallMark struct {
	FirewallMark uint32 `protobuf:"varint,2,opt,name=firewallMark,proto3,oneof"`
}

func (*VirtualServerIdentity_Address) isVirtualServerIdentity_By() {}

func (*VirtualServerIdentity_FirewallMark) isVirtualServerIdentity_By() {}

//VirtualServer an IP virtual server are is part od IPVS arch
type VirtualServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity       *VirtualServerIdentity `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	ScheduleMethod ScheduleMethod         `protobuf:"varint,2,opt,name=schedule_method,json=scheduleMethod,proto3,enum=ipvs.ScheduleMethod" json:"schedule_method,omitempty"`
}

func (x *VirtualServer) Reset() {
	*x = VirtualServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServer) ProtoMessage() {}

func (x *VirtualServer) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServer.ProtoReflect.Descriptor instead.
func (*VirtualServer) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{13}
}

func (x *VirtualServer) GetIdentity() *VirtualServerIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *VirtualServer) GetScheduleMethod() ScheduleMethod {
	if x != nil {
		return x.ScheduleMethod
	}
	return ScheduleMethod_RoundRobin
}

//VirtualServerWithReals IP-virtual server and associated its real IP servers
type VirtualServerWithReals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualServer *VirtualServer `protobuf:"bytes,1,opt,name=virtualServer,proto3" json:"virtualServer,omitempty"`
	RealServers   []*RealServer  `protobuf:"bytes,2,rep,name=realServers,proto3" json:"realServers,omitempty"`
}

func (x *VirtualServerWithReals) Reset() {
	*x = VirtualServerWithReals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualServerWithReals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServerWithReals) ProtoMessage() {}

func (x *VirtualServerWithReals) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServerWithReals.ProtoReflect.Descriptor instead.
func (*VirtualServerWithReals) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{14}
}

func (x *VirtualServerWithReals) GetVirtualServer() *VirtualServer {
	if x != nil {
		return x.VirtualServer
	}
	return nil
}

func (x *VirtualServerWithReals) GetRealServers() []*RealServer {
	if x != nil {
		return x.RealServers
	}
	return nil
}

//RealServerAddress the IP-network real server address
type RealServerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//host is IP or host name
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	//port is port > 0
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RealServerAddress) Reset() {
	*x = RealServerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealServerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealServerAddress) ProtoMessage() {}

func (x *RealServerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealServerAddress.ProtoReflect.Descriptor instead.
func (*RealServerAddress) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{15}
}

func (x *RealServerAddress) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RealServerAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

//RealServer is the real server
type RealServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *RealServerAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	//packet_forwarder use one of (DR | TUN | NAT) packet forward method
	PacketForwarder PacketFwdMethod `protobuf:"varint,2,opt,name=packet_forwarder,json=packetForwarder,proto3,enum=ipvs.PacketFwdMethod" json:"packet_forwarder,omitempty"`
	//Weight is an integer specifying the capacity of a server relative to the others in the pool.
	//The valid values of weight are 0 through to 65535. The default is 1.
	//Quiescent servers are specified with a weight of zero. A quiescent server will receive no new jobs
	//but still serve the existing jobs, for all scheduling algorithms distributed with the Linux Virtual Server.
	//Setting a quiescent server may be useful if the server is overloaded or needs to be
	//taken out of service for maintenance
	Weight uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	//upper_threshold is an integer specifying the upper connection threshold of a server.
	//The valid values of uthreshold are 0 through to 65535. The default is 0,
	//which means the upper connection threshold is not set. If uthreshold is set with other values,
	//no new connections will be sent to the server when the number of its connections exceeds its
	//upper connection threshold
	UpperThreshold uint32 `protobuf:"varint,4,opt,name=upper_threshold,json=upperThreshold,proto3" json:"upper_threshold,omitempty"`
	//lower_threshold is an integer specifying the lower connection threshold of a server.
	//The valid values of lthreshold are 0 through to 65535. The default is 0, which means the lower
	//connection threshold is not set. If lthreshold is set with other values, the server will receive
	//new connections when the number of its connections drops below its lower connection threshold.
	//If lthreshold is not set but uthreshold is set, the server will receive new connections when the
	//number of its connections drops below three forth of its upper connection threshold
	LowerThreshold uint32 `protobuf:"varint,5,opt,name=lower_threshold,json=lowerThreshold,proto3" json:"lower_threshold,omitempty"`
}

func (x *RealServer) Reset() {
	*x = RealServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealServer) ProtoMessage() {}

func (x *RealServer) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealServer.ProtoReflect.Descriptor instead.
func (*RealServer) Descriptor() ([]byte, []int) {
	return file_ipvs_api_proto_rawDescGZIP(), []int{16}
}

func (x *RealServer) GetAddress() *RealServerAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RealServer) GetPacketForwarder() PacketFwdMethod {
	if x != nil {
		return x.PacketForwarder
	}
	return PacketFwdMethod_DirectRouting
}

func (x *RealServer) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RealServer) GetUpperThreshold() uint32 {
	if x != nil {
		return x.UpperThreshold
	}
	return 0
}

func (x *RealServer) GetLowerThreshold() uint32 {
	if x != nil {
		return x.LowerThreshold
	}
	return 0
}

var file_ipvs_api_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50000,
		Name:          "ipvs.schedule_alg",
		Tag:           "bytes,50000,opt,name=schedule_alg",
		Filename:      "ipvs/api.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50001,
		Name:          "ipvs.transport",
		Tag:           "bytes,50001,opt,name=transport",
		Filename:      "ipvs/api.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50002,
		Name:          "ipvs.fwd_alg",
		Tag:           "bytes,50002,opt,name=fwd_alg",
		Filename:      "ipvs/api.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	//schedule_alg_id method algorithm
	//
	// optional string schedule_alg = 50000;
	E_ScheduleAlg = &file_ipvs_api_proto_extTypes[0]
	//transport identifiers a ne transport
	//
	// optional string transport = 50001;
	E_Transport = &file_ipvs_api_proto_extTypes[1]
	//fwd_alg packet forwarding algorithm
	//
	// optional string fwd_alg = 50002;
	E_FwdAlg = &file_ipvs_api_proto_extTypes[2]
)

var File_ipvs_api_proto protoreflect.FileDescriptor

var file_ipvs_api_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x69, 0x70, 0x76, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x69, 0x70, 0x76, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x70, 0x76, 0x73,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x70, 0x76,
	0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x5d, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x22, 0xad,
	0x01, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0xa3,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x70, 0x76, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x77, 0x68, 0x65, 0x6e, 0x22, 0x4a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x22, 0x50, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x22, 0x3f, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x73, 0x22, 0x62, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x70, 0x76, 0x73,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x22, 0x5f, 0x0a, 0x19, 0x46,
	0x69, 0x6e, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x0d, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x14,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7b,
	0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x0d,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x61, 0x6c, 0x73,
	0x12, 0x39, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0d, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22,
	0x3b, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xeb, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x70, 0x76, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40,
	0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x77, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2a, 0xbb, 0x03, 0x0a, 0x0e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a,
	0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x10, 0x00, 0x1a, 0x06, 0x82,
	0xb5, 0x18, 0x02, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x12, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x10, 0x01, 0x1a, 0x07, 0x82,
	0xb5, 0x18, 0x03, 0x77, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x1a, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x6c, 0x63, 0x12, 0x24, 0x0a, 0x17, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4c,
	0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03,
	0x1a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x77, 0x6c, 0x63, 0x12, 0x2a, 0x0a, 0x1c, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x1a, 0x08, 0x82, 0xb5, 0x18,
	0x04, 0x6c, 0x62, 0x6c, 0x63, 0x12, 0x3a, 0x0a, 0x2b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x1a, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x6c, 0x62, 0x6c, 0x63,
	0x72, 0x12, 0x1e, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x1a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x64,
	0x68, 0x12, 0x19, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x10, 0x07, 0x1a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x15,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x08, 0x1a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x73, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x0a, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0x09,
	0x1a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x6e, 0x71, 0x12, 0x19, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x6c,
	0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x1a, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x6d, 0x68, 0x12, 0x1c, 0x0a, 0x10, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x0b, 0x1a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x10, 0x0c, 0x1a,
	0x07, 0x82, 0xb5, 0x18, 0x03, 0x6f, 0x76, 0x66, 0x2a, 0x36, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x43, 0x50, 0x10, 0x00, 0x1a, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x74, 0x63, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x1a, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x75, 0x64, 0x70,
	0x2a, 0x5c, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x77, 0x64, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x06, 0x92, 0xb5, 0x18, 0x02, 0x64, 0x72, 0x12, 0x13,
	0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x01, 0x1a, 0x07, 0x92, 0xb5, 0x18, 0x03,
	0x74, 0x75, 0x6e, 0x12, 0x19, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x71, 0x75, 0x65, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x1a, 0x07, 0x92, 0xb5, 0x18, 0x03, 0x6e, 0x61, 0x74, 0x32, 0x99,
	0x04, 0x0a, 0x09, 0x49, 0x70, 0x76, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x7d, 0x0a, 0x11,
	0x46, 0x69, 0x6e, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x2f,
	0x69, 0x70, 0x76, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f,
	0x76, 0x32, 0x2f, 0x69, 0x70, 0x76, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x89, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x70,
	0x76, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x70, 0x76,
	0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x69,
	0x70, 0x76, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x3a, 0x49, 0x0a, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41,
	0x6c, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x44, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x3f, 0x0a, 0x07, 0x66,
	0x77, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x77, 0x64, 0x41, 0x6c, 0x67, 0x88, 0x01, 0x01, 0x42, 0xa5, 0x01, 0x5a,
	0x05, 0x2f, 0x69, 0x70, 0x76, 0x73, 0x92, 0x41, 0x9a, 0x01, 0x12, 0x71, 0x0a, 0x0f, 0x49, 0x50,
	0x56, 0x53, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x41, 0x50, 0x49, 0x22, 0x59, 0x0a,
	0x01, 0x45, 0x12, 0x54, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x62, 0x6c, 0x6f, 0x67,
	0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x67, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x30,
	0x32, 0x30, 0x2f, 0x30, 0x37, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x74, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x32, 0x03, 0x32, 0x2e, 0x30, 0x2a, 0x01, 0x01,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipvs_api_proto_rawDescOnce sync.Once
	file_ipvs_api_proto_rawDescData = file_ipvs_api_proto_rawDesc
)

func file_ipvs_api_proto_rawDescGZIP() []byte {
	file_ipvs_api_proto_rawDescOnce.Do(func() {
		file_ipvs_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipvs_api_proto_rawDescData)
	})
	return file_ipvs_api_proto_rawDescData
}

var file_ipvs_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ipvs_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_ipvs_api_proto_goTypes = []interface{}{
	(ScheduleMethod)(0),                   // 0: ipvs.ScheduleMethod
	(NetworkTransport)(0),                 // 1: ipvs.NetworkTransport
	(PacketFwdMethod)(0),                  // 2: ipvs.PacketFwdMethod
	(IssueReason_Code)(0),                 // 3: ipvs.IssueReason.Code
	(*UpdateVirtualServersRequest)(nil),   // 4: ipvs.UpdateVirtualServersRequest
	(*UpdateRealServersRequest)(nil),      // 5: ipvs.UpdateRealServersRequest
	(*IssueReason)(nil),                   // 6: ipvs.IssueReason
	(*VirtualServerIssue)(nil),            // 7: ipvs.VirtualServerIssue
	(*RealServerIssue)(nil),               // 8: ipvs.RealServerIssue
	(*UpdateRealServersResponse)(nil),     // 9: ipvs.UpdateRealServersResponse
	(*UpdateVirtualServersResponse)(nil),  // 10: ipvs.UpdateVirtualServersResponse
	(*ListVirtualServersRequest)(nil),     // 11: ipvs.ListVirtualServersRequest
	(*ListVirtualServersResponse)(nil),    // 12: ipvs.ListVirtualServersResponse
	(*FindVirtualServerRequest)(nil),      // 13: ipvs.FindVirtualServerRequest
	(*FindVirtualServerResponse)(nil),     // 14: ipvs.FindVirtualServerResponse
	(*VirtualServerAddress)(nil),          // 15: ipvs.VirtualServerAddress
	(*VirtualServerIdentity)(nil),         // 16: ipvs.VirtualServerIdentity
	(*VirtualServer)(nil),                 // 17: ipvs.VirtualServer
	(*VirtualServerWithReals)(nil),        // 18: ipvs.VirtualServerWithReals
	(*RealServerAddress)(nil),             // 19: ipvs.RealServerAddress
	(*RealServer)(nil),                    // 20: ipvs.RealServer
	(*descriptorpb.EnumValueOptions)(nil), // 21: google.protobuf.EnumValueOptions
}
var file_ipvs_api_proto_depIdxs = []int32{
	16, // 0: ipvs.UpdateVirtualServersRequest.delete:type_name -> ipvs.VirtualServerIdentity
	17, // 1: ipvs.UpdateVirtualServersRequest.update:type_name -> ipvs.VirtualServer
	16, // 2: ipvs.UpdateRealServersRequest.virtualServerIdentity:type_name -> ipvs.VirtualServerIdentity
	19, // 3: ipvs.UpdateRealServersRequest.delete:type_name -> ipvs.RealServerAddress
	20, // 4: ipvs.UpdateRealServersRequest.update:type_name -> ipvs.RealServer
	3,  // 5: ipvs.IssueReason.code:type_name -> ipvs.IssueReason.Code
	6,  // 6: ipvs.VirtualServerIssue.reason:type_name -> ipvs.IssueReason
	16, // 7: ipvs.VirtualServerIssue.delete:type_name -> ipvs.VirtualServerIdentity
	17, // 8: ipvs.VirtualServerIssue.update:type_name -> ipvs.VirtualServer
	6,  // 9: ipvs.RealServerIssue.reason:type_name -> ipvs.IssueReason
	19, // 10: ipvs.RealServerIssue.delete:type_name -> ipvs.RealServerAddress
	20, // 11: ipvs.RealServerIssue.update:type_name -> ipvs.RealServer
	8,  // 12: ipvs.UpdateRealServersResponse.issues:type_name -> ipvs.RealServerIssue
	7,  // 13: ipvs.UpdateVirtualServersResponse.issues:type_name -> ipvs.VirtualServerIssue
	18, // 14: ipvs.ListVirtualServersResponse.virtualServers:type_name -> ipvs.VirtualServerWithReals
	16, // 15: ipvs.FindVirtualServerRequest.virtualServerIdentity:type_name -> ipvs.VirtualServerIdentity
	18, // 16: ipvs.FindVirtualServerResponse.virtualServer:type_name -> ipvs.VirtualServerWithReals
	1,  // 17: ipvs.VirtualServerAddress.network:type_name -> ipvs.NetworkTransport
	15, // 18: ipvs.VirtualServerIdentity.address:type_name -> ipvs.VirtualServerAddress
	16, // 19: ipvs.VirtualServer.identity:type_name -> ipvs.VirtualServerIdentity
	0,  // 20: ipvs.VirtualServer.schedule_method:type_name -> ipvs.ScheduleMethod
	17, // 21: ipvs.VirtualServerWithReals.virtualServer:type_name -> ipvs.VirtualServer
	20, // 22: ipvs.VirtualServerWithReals.realServers:type_name -> ipvs.RealServer
	19, // 23: ipvs.RealServer.address:type_name -> ipvs.RealServerAddress
	2,  // 24: ipvs.RealServer.packet_forwarder:type_name -> ipvs.PacketFwdMethod
	21, // 25: ipvs.schedule_alg:extendee -> google.protobuf.EnumValueOptions
	21, // 26: ipvs.transport:extendee -> google.protobuf.EnumValueOptions
	21, // 27: ipvs.fwd_alg:extendee -> google.protobuf.EnumValueOptions
	13, // 28: ipvs.IpvsAdmin.FindVirtualServer:input_type -> ipvs.FindVirtualServerRequest
	11, // 29: ipvs.IpvsAdmin.ListVirtualServers:input_type -> ipvs.ListVirtualServersRequest
	4,  // 30: ipvs.IpvsAdmin.UpdateVirtualServers:input_type -> ipvs.UpdateVirtualServersRequest
	5,  // 31: ipvs.IpvsAdmin.UpdateRealServers:input_type -> ipvs.UpdateRealServersRequest
	14, // 32: ipvs.IpvsAdmin.FindVirtualServer:output_type -> ipvs.FindVirtualServerResponse
	12, // 33: ipvs.IpvsAdmin.ListVirtualServers:output_type -> ipvs.ListVirtualServersResponse
	10, // 34: ipvs.IpvsAdmin.UpdateVirtualServers:output_type -> ipvs.UpdateVirtualServersResponse
	9,  // 35: ipvs.IpvsAdmin.UpdateRealServers:output_type -> ipvs.UpdateRealServersResponse
	32, // [32:36] is the sub-list for method output_type
	28, // [28:32] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	25, // [25:28] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_ipvs_api_proto_init() }
func file_ipvs_api_proto_init() {
	if File_ipvs_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipvs_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtualServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRealServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualServerIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealServerIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRealServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtualServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtualServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVirtualServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindVirtualServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindVirtualServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualServerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualServerIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualServerWithReals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealServerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ipvs_api_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*VirtualServerIssue_Delete)(nil),
		(*VirtualServerIssue_Update)(nil),
	}
	file_ipvs_api_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RealServerIssue_Delete)(nil),
		(*RealServerIssue_Update)(nil),
	}
	file_ipvs_api_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*VirtualServerIdentity_Address)(nil),
		(*VirtualServerIdentity_FirewallMark)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipvs_api_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 3,
			NumServices:   1,
		},
		GoTypes:           file_ipvs_api_proto_goTypes,
		DependencyIndexes: file_ipvs_api_proto_depIdxs,
		EnumInfos:         file_ipvs_api_proto_enumTypes,
		MessageInfos:      file_ipvs_api_proto_msgTypes,
		ExtensionInfos:    file_ipvs_api_proto_extTypes,
	}.Build()
	File_ipvs_api_proto = out.File
	file_ipvs_api_proto_rawDesc = nil
	file_ipvs_api_proto_goTypes = nil
	file_ipvs_api_proto_depIdxs = nil
}
