// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ipruler/api.proto

package ipruler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPRulerServiceClient is the client API for IPRulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPRulerServiceClient interface {
	//AddIPRule добавить ip rule
	AddIPRule(ctx context.Context, in *AddIPRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//RemoveIPRule удалить ip rule
	RemoveIPRule(ctx context.Context, in *RemoveIPRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//GetState вернуть все ip rules
	GetState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type iPRulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPRulerServiceClient(cc grpc.ClientConnInterface) IPRulerServiceClient {
	return &iPRulerServiceClient{cc}
}

func (c *iPRulerServiceClient) AddIPRule(ctx context.Context, in *AddIPRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ipruler.IPRulerService/AddIPRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRulerServiceClient) RemoveIPRule(ctx context.Context, in *RemoveIPRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ipruler.IPRulerService/RemoveIPRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRulerServiceClient) GetState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/ipruler.IPRulerService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPRulerServiceServer is the server API for IPRulerService service.
// All implementations must embed UnimplementedIPRulerServiceServer
// for forward compatibility
type IPRulerServiceServer interface {
	//AddIPRule добавить ip rule
	AddIPRule(context.Context, *AddIPRuleRequest) (*emptypb.Empty, error)
	//RemoveIPRule удалить ip rule
	RemoveIPRule(context.Context, *RemoveIPRuleRequest) (*emptypb.Empty, error)
	//GetState вернуть все ip rules
	GetState(context.Context, *emptypb.Empty) (*GetStateResponse, error)
	mustEmbedUnimplementedIPRulerServiceServer()
}

// UnimplementedIPRulerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIPRulerServiceServer struct {
}

func (UnimplementedIPRulerServiceServer) AddIPRule(context.Context, *AddIPRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPRule not implemented")
}
func (UnimplementedIPRulerServiceServer) RemoveIPRule(context.Context, *RemoveIPRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIPRule not implemented")
}
func (UnimplementedIPRulerServiceServer) GetState(context.Context, *emptypb.Empty) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedIPRulerServiceServer) mustEmbedUnimplementedIPRulerServiceServer() {}

// UnsafeIPRulerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPRulerServiceServer will
// result in compilation errors.
type UnsafeIPRulerServiceServer interface {
	mustEmbedUnimplementedIPRulerServiceServer()
}

func RegisterIPRulerServiceServer(s grpc.ServiceRegistrar, srv IPRulerServiceServer) {
	s.RegisterService(&IPRulerService_ServiceDesc, srv)
}

func _IPRulerService_AddIPRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRulerServiceServer).AddIPRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipruler.IPRulerService/AddIPRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRulerServiceServer).AddIPRule(ctx, req.(*AddIPRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRulerService_RemoveIPRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIPRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRulerServiceServer).RemoveIPRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipruler.IPRulerService/RemoveIPRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRulerServiceServer).RemoveIPRule(ctx, req.(*RemoveIPRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRulerService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRulerServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipruler.IPRulerService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRulerServiceServer).GetState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IPRulerService_ServiceDesc is the grpc.ServiceDesc for IPRulerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPRulerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipruler.IPRulerService",
	HandlerType: (*IPRulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIPRule",
			Handler:    _IPRulerService_AddIPRule_Handler,
		},
		{
			MethodName: "RemoveIPRule",
			Handler:    _IPRulerService_RemoveIPRule_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _IPRulerService_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipruler/api.proto",
}
